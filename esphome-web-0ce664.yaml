
# Pin Allocation
#  Button 0 : GPIO0
#  backlight_pin: GPIO4
#  cs_pin: GPIO5
#  dc_pin: GPIO16
#  clk_pin: GPIO18
#  mosi_pin: GPIO19
#  sda: GPIO21
#  scl: GPIO22
#  reset_pin: GPIO23
#  Battery(adc): GPIO34
#  Button 1: GPIO35
#  GeigerCounter(pulse, ADC0): GPIO36 
#  Geiger-Counter Documentation at https://drive.google.com/drive/u/0/folders/0B9itH-BnWE5sY2JGRkM4MWhSYkE



#  Credit for the original ESP32 implementation to mikenabhan 
#  at https://github.com/mikenabhan/iot-geiger-counter/blob/main/esphome.yaml
#  and https://www.mikenabhan.com/posts/esphome-home-assistant-geiger-counter-esp8266-esp32/
#  < - > 
#  Connect the devices :
#  The Geiger Counter draws ~15mA of power which means that we can skip the outside power supplies and hook it right up to the ESP.
#  There are three pins on the left side of the board labeled GND, 5V, and Vin. GND is Ground and 5v is your 5v power input. 
#  Confusingly the pin labeled Vin is just your data pin;

esphome:
  name: geiger-counter
 
esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:

ota:


wifi:
  #use_address: esphome-web-0ce664.local
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Esphome-Web-0Ce664"
    password: "9C5fWQ8ldRSo"

captive_portal:

time:
  - platform: homeassistant
    id: esptime

font:
  - file: "times-new-roman.ttf"
    id: tnr0
    size: 24
    
  - file: "times-new-roman.ttf"
    id: tnr1
    size: 24
    glyphs:
     ['&', '@', '!', ',', '.', '"', '%', '(', ')', '+', '-', '_', ':', '°', '0',
       '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E',
       'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',
       'T', 'U', 'V', 'W', 'X', 'Y', 'Z', ' ', 'a', 'b', 'c', 'd', 'e', 'f',
       'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
       'u', 'v', 'w', 'x', 'y', 'z','å', 'ä', 'ö', '/', 'µ']
    
#set up colors
color:
  - id: my_red
    red: 90%
    green: 0%
    blue: 0%
  - id: my_yellow
    red: 100%
    green: 90%
    blue: 0%
  - id: my_low_green
    red: 10%
    green: 60%
    blue: 10%
  - id: my_green
    red: 0%
    green: 90%
    blue: 0%
  - id: my_blue
    red: 0%
    green: 0%
    blue: 90%
  - id: my_low_blue
    red: 10%
    green: 10%
    blue: 60%
  - id: my_gray
    red: 40%
    green: 40%
    blue: 40%
    
spi:
  clk_pin: GPIO18
  mosi_pin: GPIO19
  
  
binary_sensor:

  - platform: status
    name: "Node Status"
    id: system_status
    
  - platform: gpio
    pin:
      number: GPIO0 
      inverted: true
      mode:
        input: true
        pullup: true
    name: "T-Display Button Input 0"
    id: tdisplay_button_input_0
    on_press:
      then:
       - display.page.show_next: st7789vdisplay
       - component.update: st7789vdisplay

  - platform: template
    device_class: safety
    name: "Radiation Warning"
    # This doesn't necessarily represent a "dangerous" count, but one that is abnormally high
    lambda: |-
      if (id(geiger_counter).state > 100) {
        // High Count.
        return true;
      } else {
        // Normal Count.
        return false;
      }
        
  - platform: gpio
    pin:
      number: GPIO35
      inverted: true
    name: "T-Display Button Input 1"
    id: tdisplay_button_input_1
    on_press:
      then:
      - switch.toggle: backlight


  

# Infering the battery level from voltage only is misleading, but I don't really have a better method at hand
# Battery levels look like max=2.23, min=1.38
sensor:
  - platform: adc
    pin: 34
    attenuation: 11db
    name: VBatt
    id: vcc
    update_interval: 60s
    
  - platform: template
    name: batterylevel
    id: batterylevel
    unit_of_measurement: '%'
    update_interval: 60s
    lambda: |-
      return ((id(vcc).state * 118) - 162);   


  - platform: pulse_counter
    pin: GPIO36
    name: ${upper_devicename}
    id: "geiger_counter"
    unit_of_measurement: 'CPM'
    on_raw_value:
      - sensor.template.publish:
          id: radiation_level
          state: !lambda 'return x / 153.8;'
          # this was what I got for my data sheet and it matched reasonably well with the background data that I have.  Many people are using other values.

  - platform: template
    name: "Radiation Level"
    id: "radiation_level"
    unit_of_measurement: 'µSv/h'
    icon: mdi:radioactive
    accuracy_decimals: 5
    


# We can still control the backlight independently
switch:
  - platform: gpio
    pin: GPIO4
    name: "Backlight"
    id: backlight

graph:
  - id: radiation_level_graph
    sensor: radiation_level
    duration: 1h
    width: 151
    height: 51

display:
  - platform: st7789v
    id: st7789vdisplay
    backlight_pin: GPIO4
    cs_pin: GPIO5
    dc_pin: GPIO16
    reset_pin: GPIO23
    rotation: 90
    pages:
     - id: page1  
       lambda: |-
        it.rectangle(0,  0, it.get_width(), it.get_height(), id(my_blue));
        it.rectangle(0, 20, it.get_width(), it.get_height(), id(my_blue));   // header bar

        it.strftime((240 / 2), (140 / 3) * 1 + 5, id(tnr1), id(my_gray), TextAlign::CENTER, "%Y-%m-%d", id(esptime).now());
        it.strftime((240 / 2), (140 / 3) * 1.5 + 5, id(tnr1), id(my_gray), TextAlign::CENTER, "%H:%M:%S", id(esptime).now());
        it.print(5, 5, id(tnr1), id(my_yellow), TextAlign::TOP_LEFT, "ESPHome");

        if (id(system_status).state) {
         it.print(235, 5, id(tnr1), id(my_green), TextAlign::TOP_RIGHT, "Online");
        }
        else {
        it.print(235, 5, id(tnr1), id(my_red), TextAlign::TOP_RIGHT, "Offline");
        }
      
        if (id(geiger_counter).state > 100) {
        // High Count.
        it.printf(45, 106, id(tnr1), id(my_red), "%f µSv/h", id(radiation_level).state);
        }
        else {
        it.printf(45, 106, id(tnr1), id(my_low_green), "%f µSv/h ", id(radiation_level).state);
        }
     - id: page2  
       lambda: |-
        it.graph(10, 20, id(radiation_level_graph));
        // Show bare-minimum auto-ranged graph
